const request = require("request");
const qs = require("querystring");
const createError = require("create-error");

const ORIGIN = "https://mackerel.io";
const VERSION = "v0";
const STATUS = ["standby", "working", "maintenance", "poweroff"];
const METHODS = ["GET", "POST", "PUT", "DELETE"];

const NoAPIKeyError = createError("NoAPIKeyError", { message: "NoAPIKeyError" });
const InvalidPathError = createError("InvalidPathError", {});
const InvalidMethodError = createError("InvalidMethodError", {});

const swagger = require("js-yaml").safeLoad(require("fs").readFileSync(`${__dirname}/swagger.yml`));
console.log(swagger);

class Mackerel {
  constructor(apikey, options = {}) {
    if (!apikey) throw new NoAPIKeyError();
    this.apikey = apikey;
    this.origin = options.origin || ORIGIN;
    this.version = options.version || VERSION;
    this.endpoint = `${this.origin}/api/${this.version}`;
    this.proxy = options.proxy || undefined;
  }

  api(path, method, data) {
    if (typeof path !== "string") {
      throw new InvalidPathError();
    }
    if (typeof method !== "string" || METHODS.indexOf(method.toUpperCase()) === -1) {
      throw new InvalidMethodError();
    }
    const opt = {
      method: method.toUpperCase(),
      url: `${this.endpoint}${path}`,
      proxy: this.proxy || null,
      headers: {
        "X-Api-Key": this.apikey,
        "accepts": "application/json"
      }
    };
    const reqData = JSON.stringify(data);
    if (["GET", "DELETE"].indexOf(opt.method) > -1) {
      opt.url += `?${qs.stringify(reqData)}`;
    } else {
      opt.form = reqData;
    }

    return new Promise((resolve, reject) => {
      request(opt, (err, res, body) => {
        if (!err) body = JSON.parse(body);
        if (err) return reject(err);
        return resolve({ res, body });
      });
    });
  }
  resolve(cb) {
    return ({ res, body }) => cb ? cb(null, res, body) : { res, body };
  }
  reject(cb) {
    return err => cb ? cb(err) : err;
  }

  // // services
  // getServices(cb){
  //   return this.api("/services", "GET").then(this.resolve(cb)).catch(this.reject(cb));
  // }
  // getRoles(serviceName, cb){
  //   return this.api(`/services/${serviceName}/roles`, "GET").then(this.resolve(cb)).catch(this.reject(cb));
  // }
  // getTags(serviceName, cb){
  //   return this.api(`/services/${serviceName}/tags`, "GET").then(this.resolve(cb)).catch(this.reject(cb));
  // }

  // // hosts
  // addHosts(host, cb){
  //   return this.api("/hosts", "POST").then(this.resolve(cb)).catch(this.reject(cb));
  // }
  // getHost(hostId, cb){
  //   return this.api(`/hosts/${hostId}`, "GET").then(this.resolve(cb)).catch(this.reject(cb));
  // }
  // updateHost(hostId, host, cb){
  //   return this.api(`/hosts/${hostId}`, "GET").then(this.resolve(cb)).catch(this.reject(cb));
  // }

};
Mackerel.NoAPIKeyError = NoAPIKeyError;

module.exports = Mackerel;