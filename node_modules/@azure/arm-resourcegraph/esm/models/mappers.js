/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as tslib_1 from "tslib";
import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
export var CloudError = CloudErrorMapper;
export var BaseResource = BaseResourceMapper;
export var QueryRequestOptions = {
    serializedName: "QueryRequestOptions",
    type: {
        name: "Composite",
        className: "QueryRequestOptions",
        modelProperties: {
            skipToken: {
                serializedName: "$skipToken",
                type: {
                    name: "String"
                }
            },
            top: {
                serializedName: "$top",
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            },
            skip: {
                serializedName: "$skip",
                constraints: {
                    InclusiveMinimum: 0
                },
                type: {
                    name: "Number"
                }
            },
            resultFormat: {
                serializedName: "resultFormat",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "table",
                        "objectArray"
                    ]
                }
            }
        }
    }
};
export var FacetRequestOptions = {
    serializedName: "FacetRequestOptions",
    type: {
        name: "Composite",
        className: "FacetRequestOptions",
        modelProperties: {
            sortBy: {
                serializedName: "sortBy",
                type: {
                    name: "String"
                }
            },
            sortOrder: {
                serializedName: "sortOrder",
                defaultValue: 'desc',
                type: {
                    name: "Enum",
                    allowedValues: [
                        "asc",
                        "desc"
                    ]
                }
            },
            filter: {
                serializedName: "filter",
                type: {
                    name: "String"
                }
            },
            top: {
                serializedName: "$top",
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export var FacetRequest = {
    serializedName: "FacetRequest",
    type: {
        name: "Composite",
        className: "FacetRequest",
        modelProperties: {
            expression: {
                required: true,
                serializedName: "expression",
                type: {
                    name: "String"
                }
            },
            options: {
                serializedName: "options",
                type: {
                    name: "Composite",
                    className: "FacetRequestOptions"
                }
            }
        }
    }
};
export var QueryRequest = {
    serializedName: "QueryRequest",
    type: {
        name: "Composite",
        className: "QueryRequest",
        modelProperties: {
            subscriptions: {
                required: true,
                serializedName: "subscriptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            query: {
                required: true,
                serializedName: "query",
                type: {
                    name: "String"
                }
            },
            options: {
                serializedName: "options",
                type: {
                    name: "Composite",
                    className: "QueryRequestOptions"
                }
            },
            facets: {
                serializedName: "facets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FacetRequest"
                        }
                    }
                }
            }
        }
    }
};
export var Facet = {
    serializedName: "Facet",
    type: {
        name: "Composite",
        polymorphicDiscriminator: {
            serializedName: "resultType",
            clientName: "resultType"
        },
        uberParent: "Facet",
        className: "Facet",
        modelProperties: {
            expression: {
                required: true,
                serializedName: "expression",
                type: {
                    name: "String"
                }
            },
            resultType: {
                required: true,
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var QueryResponse = {
    serializedName: "QueryResponse",
    type: {
        name: "Composite",
        className: "QueryResponse",
        modelProperties: {
            totalRecords: {
                required: true,
                serializedName: "totalRecords",
                type: {
                    name: "Number"
                }
            },
            count: {
                required: true,
                serializedName: "count",
                type: {
                    name: "Number"
                }
            },
            resultTruncated: {
                required: true,
                serializedName: "resultTruncated",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "true",
                        "false"
                    ]
                }
            },
            skipToken: {
                serializedName: "$skipToken",
                type: {
                    name: "String"
                }
            },
            data: {
                required: true,
                serializedName: "data",
                type: {
                    name: "Object"
                }
            },
            facets: {
                serializedName: "facets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Facet"
                        }
                    }
                }
            }
        }
    }
};
export var Column = {
    serializedName: "Column",
    type: {
        name: "Composite",
        className: "Column",
        modelProperties: {
            name: {
                required: true,
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                required: true,
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "string",
                        "integer",
                        "number",
                        "boolean",
                        "object"
                    ]
                }
            }
        }
    }
};
export var Table = {
    serializedName: "Table",
    type: {
        name: "Composite",
        className: "Table",
        modelProperties: {
            columns: {
                required: true,
                serializedName: "columns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Column"
                        }
                    }
                }
            },
            rows: {
                required: true,
                serializedName: "rows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Sequence",
                            element: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
export var FacetResult = {
    serializedName: "FacetResult",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Facet.type.polymorphicDiscriminator,
        uberParent: "Facet",
        className: "FacetResult",
        modelProperties: tslib_1.__assign({}, Facet.type.modelProperties, { totalRecords: {
                required: true,
                serializedName: "totalRecords",
                type: {
                    name: "Number"
                }
            }, count: {
                required: true,
                serializedName: "count",
                type: {
                    name: "Number"
                }
            }, data: {
                required: true,
                serializedName: "data",
                type: {
                    name: "Object"
                }
            } })
    }
};
export var ErrorDetails = {
    serializedName: "ErrorDetails",
    type: {
        name: "Composite",
        className: "ErrorDetails",
        modelProperties: {
            code: {
                required: true,
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                required: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        },
        additionalProperties: {
            type: {
                name: "Object"
            }
        }
    }
};
export var FacetError = {
    serializedName: "FacetError",
    type: {
        name: "Composite",
        polymorphicDiscriminator: Facet.type.polymorphicDiscriminator,
        uberParent: "Facet",
        className: "FacetError",
        modelProperties: tslib_1.__assign({}, Facet.type.modelProperties, { errors: {
                required: true,
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetails",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            } })
    }
};
export var ErrorModel = {
    serializedName: "Error",
    type: {
        name: "Composite",
        className: "ErrorModel",
        modelProperties: {
            code: {
                required: true,
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                required: true,
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetails",
                            additionalProperties: {
                                type: {
                                    name: "Object"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
};
export var ErrorResponse = {
    serializedName: "ErrorResponse",
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                required: true,
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
export var OperationDisplay = {
    serializedName: "Operation_display",
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var Operation = {
    serializedName: "Operation",
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export var OperationListResult = {
    serializedName: "OperationListResult",
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
export var discriminators = {
    'Facet': Facet,
    'Facet.FacetResult': FacetResult,
    'Facet.FacetError': FacetError
};
//# sourceMappingURL=mappers.js.map