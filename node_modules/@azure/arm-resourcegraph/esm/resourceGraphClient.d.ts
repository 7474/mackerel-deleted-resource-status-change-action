import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as operations from "./operations";
import { ResourceGraphClientContext } from "./resourceGraphClientContext";
declare class ResourceGraphClient extends ResourceGraphClientContext {
    operations: operations.Operations;
    /**
     * Initializes a new instance of the ResourceGraphClient class.
     * @param credentials Credentials needed for the client to connect to Azure.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, options?: Models.ResourceGraphClientOptions);
    /**
     * Queries the resources managed by Azure Resource Manager for all subscriptions specified in the
     * request.
     * @param query Request specifying query and its options.
     * @param [options] The optional parameters
     * @returns Promise<Models.ResourcesResponse>
     */
    resources(query: Models.QueryRequest, options?: msRest.RequestOptionsBase): Promise<Models.ResourcesResponse>;
    /**
     * @param query Request specifying query and its options.
     * @param callback The callback
     */
    resources(query: Models.QueryRequest, callback: msRest.ServiceCallback<Models.QueryResponse>): void;
    /**
     * @param query Request specifying query and its options.
     * @param options The optional parameters
     * @param callback The callback
     */
    resources(query: Models.QueryRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QueryResponse>): void;
}
export { ResourceGraphClient, ResourceGraphClientContext, Models as ResourceGraphModels, Mappers as ResourceGraphMappers };
export * from "./operations";
//# sourceMappingURL=resourceGraphClient.d.ts.map