/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (factory((global.Azure = global.Azure || {}, global.Azure.ArmResourcegraph = {}),global.msRestAzure,global.msRest));
}(this, (function (exports,msRestAzure,msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({

    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var QueryRequestOptions = {
        serializedName: "QueryRequestOptions",
        type: {
            name: "Composite",
            className: "QueryRequestOptions",
            modelProperties: {
                skipToken: {
                    serializedName: "$skipToken",
                    type: {
                        name: "String"
                    }
                },
                top: {
                    serializedName: "$top",
                    constraints: {
                        InclusiveMaximum: 1000,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                },
                skip: {
                    serializedName: "$skip",
                    constraints: {
                        InclusiveMinimum: 0
                    },
                    type: {
                        name: "Number"
                    }
                },
                resultFormat: {
                    serializedName: "resultFormat",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "table",
                            "objectArray"
                        ]
                    }
                }
            }
        }
    };
    var FacetRequestOptions = {
        serializedName: "FacetRequestOptions",
        type: {
            name: "Composite",
            className: "FacetRequestOptions",
            modelProperties: {
                sortBy: {
                    serializedName: "sortBy",
                    type: {
                        name: "String"
                    }
                },
                sortOrder: {
                    serializedName: "sortOrder",
                    defaultValue: 'desc',
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "asc",
                            "desc"
                        ]
                    }
                },
                filter: {
                    serializedName: "filter",
                    type: {
                        name: "String"
                    }
                },
                top: {
                    serializedName: "$top",
                    constraints: {
                        InclusiveMaximum: 1000,
                        InclusiveMinimum: 1
                    },
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var FacetRequest = {
        serializedName: "FacetRequest",
        type: {
            name: "Composite",
            className: "FacetRequest",
            modelProperties: {
                expression: {
                    required: true,
                    serializedName: "expression",
                    type: {
                        name: "String"
                    }
                },
                options: {
                    serializedName: "options",
                    type: {
                        name: "Composite",
                        className: "FacetRequestOptions"
                    }
                }
            }
        }
    };
    var QueryRequest = {
        serializedName: "QueryRequest",
        type: {
            name: "Composite",
            className: "QueryRequest",
            modelProperties: {
                subscriptions: {
                    required: true,
                    serializedName: "subscriptions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                query: {
                    required: true,
                    serializedName: "query",
                    type: {
                        name: "String"
                    }
                },
                options: {
                    serializedName: "options",
                    type: {
                        name: "Composite",
                        className: "QueryRequestOptions"
                    }
                },
                facets: {
                    serializedName: "facets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "FacetRequest"
                            }
                        }
                    }
                }
            }
        }
    };
    var Facet = {
        serializedName: "Facet",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "resultType",
                clientName: "resultType"
            },
            uberParent: "Facet",
            className: "Facet",
            modelProperties: {
                expression: {
                    required: true,
                    serializedName: "expression",
                    type: {
                        name: "String"
                    }
                },
                resultType: {
                    required: true,
                    serializedName: "resultType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var QueryResponse = {
        serializedName: "QueryResponse",
        type: {
            name: "Composite",
            className: "QueryResponse",
            modelProperties: {
                totalRecords: {
                    required: true,
                    serializedName: "totalRecords",
                    type: {
                        name: "Number"
                    }
                },
                count: {
                    required: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                },
                resultTruncated: {
                    required: true,
                    serializedName: "resultTruncated",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "true",
                            "false"
                        ]
                    }
                },
                skipToken: {
                    serializedName: "$skipToken",
                    type: {
                        name: "String"
                    }
                },
                data: {
                    required: true,
                    serializedName: "data",
                    type: {
                        name: "Object"
                    }
                },
                facets: {
                    serializedName: "facets",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Facet"
                            }
                        }
                    }
                }
            }
        }
    };
    var Column = {
        serializedName: "Column",
        type: {
            name: "Composite",
            className: "Column",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "string",
                            "integer",
                            "number",
                            "boolean",
                            "object"
                        ]
                    }
                }
            }
        }
    };
    var Table = {
        serializedName: "Table",
        type: {
            name: "Composite",
            className: "Table",
            modelProperties: {
                columns: {
                    required: true,
                    serializedName: "columns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Column"
                            }
                        }
                    }
                },
                rows: {
                    required: true,
                    serializedName: "rows",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Sequence",
                                element: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var FacetResult = {
        serializedName: "FacetResult",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Facet.type.polymorphicDiscriminator,
            uberParent: "Facet",
            className: "FacetResult",
            modelProperties: __assign({}, Facet.type.modelProperties, { totalRecords: {
                    required: true,
                    serializedName: "totalRecords",
                    type: {
                        name: "Number"
                    }
                }, count: {
                    required: true,
                    serializedName: "count",
                    type: {
                        name: "Number"
                    }
                }, data: {
                    required: true,
                    serializedName: "data",
                    type: {
                        name: "Object"
                    }
                } })
        }
    };
    var ErrorDetails = {
        serializedName: "ErrorDetails",
        type: {
            name: "Composite",
            className: "ErrorDetails",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            },
            additionalProperties: {
                type: {
                    name: "Object"
                }
            }
        }
    };
    var FacetError = {
        serializedName: "FacetError",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Facet.type.polymorphicDiscriminator,
            uberParent: "Facet",
            className: "FacetError",
            modelProperties: __assign({}, Facet.type.modelProperties, { errors: {
                    required: true,
                    serializedName: "errors",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetails",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                } })
        }
    };
    var ErrorModel = {
        serializedName: "Error",
        type: {
            name: "Composite",
            className: "ErrorModel",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ErrorDetails",
                                additionalProperties: {
                                    type: {
                                        name: "Object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    var ErrorResponse = {
        serializedName: "ErrorResponse",
        type: {
            name: "Composite",
            className: "ErrorResponse",
            modelProperties: {
                error: {
                    required: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "ErrorModel"
                    }
                }
            }
        }
    };
    var OperationDisplay = {
        serializedName: "Operation_display",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                }
            }
        }
    };
    var discriminators = {
        'Facet': Facet,
        'Facet.FacetResult': FacetResult,
        'Facet.FacetError': FacetError
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        CloudError: CloudError,
        BaseResource: BaseResource,
        QueryRequestOptions: QueryRequestOptions,
        FacetRequestOptions: FacetRequestOptions,
        FacetRequest: FacetRequest,
        QueryRequest: QueryRequest,
        Facet: Facet,
        QueryResponse: QueryResponse,
        Column: Column,
        Table: Table,
        FacetResult: FacetResult,
        ErrorDetails: ErrorDetails,
        FacetError: FacetError,
        ErrorModel: ErrorModel,
        ErrorResponse: ErrorResponse,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        OperationListResult: OperationListResult,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        discriminators: discriminators,
        CloudError: CloudError,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {ResourceGraphClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.ResourceGraph/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-resourcegraph";
    var packageVersion = "2.0.0";
    var ResourceGraphClientContext = /** @class */ (function (_super) {
        __extends(ResourceGraphClientContext, _super);
        /**
         * Initializes a new instance of the ResourceGraphClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function ResourceGraphClientContext(credentials, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2019-04-01';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return ResourceGraphClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var ResourceGraphClient = /** @class */ (function (_super) {
        __extends(ResourceGraphClient, _super);
        /**
         * Initializes a new instance of the ResourceGraphClient class.
         * @param credentials Credentials needed for the client to connect to Azure.
         * @param [options] The parameter options
         */
        function ResourceGraphClient(credentials, options) {
            var _this = _super.call(this, credentials, options) || this;
            _this.operations = new Operations(_this);
            return _this;
        }
        ResourceGraphClient.prototype.resources = function (query, options, callback) {
            return this.sendOperationRequest({
                query: query,
                options: options
            }, resourcesOperationSpec, callback);
        };
        return ResourceGraphClient;
    }(ResourceGraphClientContext));
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers);
    var resourcesOperationSpec = {
        httpMethod: "POST",
        path: "providers/Microsoft.ResourceGraph/resources",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "query",
            mapper: __assign({}, QueryRequest, { required: true })
        },
        responses: {
            200: {
                bodyMapper: QueryResponse
            },
            default: {
                bodyMapper: ErrorResponse
            }
        },
        serializer: serializer$1
    };

    exports.ResourceGraphClient = ResourceGraphClient;
    exports.ResourceGraphClientContext = ResourceGraphClientContext;
    exports.ResourceGraphModels = index;
    exports.ResourceGraphMappers = Mappers;
    exports.Operations = Operations;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-resourcegraph.js.map
